    Описание взаимодействия клиента и сервера по процессу «Программирование»:
1) Клиент проводит авторизацию сеанса на сервере. Оператор вводит в поля в окне программы логин и пароль, выдаваемые администратором при допуске к данной работе. Приложение отправляет запрос URI “/flash/login”. (запрос 1). В запросе передаются поля login и password, заполненные данными от оператора. 
Все запросы на сервер передаются по протоколу HTTPS методом POST. В теле запроса содержится json-объект следующей структуры: { “filed1” : value1 … , “fieldN” : valueN } 
Например, тело запроса 1 может выглядеть так: { “login” : “operator” , “password” : “123” }
2) Сервер проводит проверку логина и пароля, в случае успеха формирует токен, присущий открываемому сеансу и отправляет его в поле token ответа. В случае неуспеха в ответе поле token будет пустым. 
Ответ от сервера так же содержит структуру json c полями. Обязательными полями являются code и descr – код ответа (ОК или ошибки) и строка-описание. За ними идут собственные поля ответа.
Например, ответ на запрос 1 может выглядеть так: { “code” : 0 , “descr” : “OK” , “token” : “123456” }    
2.1) клиент при положительном ответе сохраняет токен и переходит к пукту 3.
2.2) при отрицательном ответе или отсутствии ответа (таймаут операции) клиент должен оповестить оператора об ошибке. (поле descr из ответа или «Сервер недоступен») и вернуться к пункту 1).
Если сервер регистрирует более 5 неправильных попыток входа с данного IP, он увеличивает время ответа до 5 минут для предотвращения перегрузки и подбора пароля.
Токен сеанса действителен установленное время (предварительно на 10 минут) после каждого запроса, но не более 24 часов с момента выдачи. 
Если токен получен клиентом, оператор дополнительно может закрыть сессию кнопкой «выйти».
По нажатию кнопки приложение отправляет запрос URI “/flash/closeSession”. В запросе передается поле token, содержащее токен закрываемого сеанса. После этого клиент переходит к ожиданию логина/пароля, а сервер аннулирует токен и дальнейшие запросы с ним отвергает.
3) Клиент производит сбор данных. Оператор сканирует по приглашению программы (аппаратным сканером) штрих-код, прилагаемый к устройству, затем, также по приглашению, QR-код, затем выбирает экранными кнопками тип устройства, для некоторых типов также роль устройства.
По нажатию кнопки «начать прошивку» приложение отправляет запрос URI “/flash/getNewID” (запрос 2) с полями token, barcode, qrcode, type, role, заполнив их собранными данными.
С момента отправки запроса 2 в случае ошибки в запросах или прошивании приложение инструктирует оператора отложить сканированные шрих- и qr-коды в брак и взять новые. Устройство можно использовать то, с которым начата работа.
 4) Сервер проверяет токен, наличие qr-кода и штрих-кода в базе сгенерированных кодов, а также их свободность. В случае, если коды есть в базе сгенерированных и они свободны, для устройства создается новая запись в таблице. Генерируется ИД устройства, который передается в ответе в поле id. Запись в таблице связывает ИД устройства, штрих- и qr-код. Помимо того, в неё заносится тип и роль устройства. Если проверки не пройдены или запись в таблицу не удалась, поле id в ответе будет пустым.
4.1) при положительном ответе клиент переходит к пункту 5).
4.2) при отрицательном ответе сервера клиент инструктирует оператора и переходит к пункту 3).
4.3) при отсутствии ответа от сервера клиент инструктирует оператора и переходит к пункту 1).
5) Клиент на основе ИД устройства, выданного сервером, генерирует MAC-адрес устройства и отправляет его серверу на проверку уникальности. Приложение отправляет запрос URI “/flash/setMAC” (запрос 3) с полями token, id, mac. 
С момента отправки запроса 3 в случае ошибки в запросах или прошивании приложение выполняет скрипт стирания прошивки с устройства, инструктирует оператора отложить сканированные штрих- и qr-коды в брак, а также вместе с ними отложить устройство. В рамках данного процесса устройство повторной прошивке не подлежит.
6) Cервер проверяет токен, уникальность MAC, добавляет его в запись об устройстве. Результат возвращается в ответе в полях code и descr.
6.1) при положительном ответе клиент переходит к пункту 7).
6.2) при отрицательном ответе сервера клиент инструктирует оператора и переходит к пункту 3).
6.3) при отсутствии ответа от сервера клиент инструктирует оператора и переходит к пункту 1).         
7) Клиент инструктирует оператора подключить устройство к разъему для прошивания, генерирует файл прошивки, вызывая заранее подготовленные скрипты. В результате помимо двоичного файла прошивки формируется отчёт, содержащий (дату и) время прошивки устройства и версию исходного кода, для этого использованную.
7.1) если скрипты выдали код возврата «успешно», клиент переходит к пункту 8).
7.2) если код возврата – «ошибка», клиент инструктирует оператора и переходит к пункту 3).
8) Клиент вызывает скрипты, осуществляющие запись прошивки на устройство.
8.1) если скрипты выдали код возврата «успешно», клиент переходит к пункту 9).
8.2) если код возврата – «ошибка», клиент инструктирует оператора и переходит к пункту 3).
9) Клиент отправляет серверу отчет. Приложение отправляет запрос URI “/flash/prodReport” с полями token, id, prodTime и fwVersion, в которые записывает данные из отчёта скриптов.
10) Сервер записывает данные в таблицу. Результат возвращается в ответе в полях code и descr.        
 9.1) при положительном ответе клиент инструктирует пользователя отключить устройство и отложить его вместе с штрих- и qr-кодами в склад готовых устройств. Удаляет двоичные файлы прошивки с диска. После переходит к пункту 3).
9.2) при отрицательном ответе клиент выполняет скрипт стирания прошивки, удаляет файлы прошивки с диска, инструктирует оператора и переходит к пункту 3).
9.3) при отсутствии ответа от сервера клиент выполняет скрипт стирания прошивки, удаляет файлы прошивки с диска, инструктирует оператора и переходит к пункту 1).
