Описание взаимодействия клиента и сервера по процессу «Сброс»:
1) Клиент проводит авторизацию сеанса на сервере. Оператор Сброса вводит в поля в окне программы логин и пароль, выдаваемые администратором при допуске к данной работе. Учетная запись Оператора Сброса и Оператора Прошивки должны быть разными. Приложение отправляет запрос URI “/reset/login”. (запрос 1). В запросе передаются поля login и password, заполненные данными от оператора. 
Все запросы на сервер передаются по протоколу HTTPS методом POST. В теле запроса содержится json-объект следующей структуры: { “filed1” : value1 … , “fieldN” : valueN } 
Например, тело запроса 1 может выглядеть так: { “login” : “operator” , “password” : “123” }
2) Сервер проводит проверку логина и пароля, в случае успеха формирует токен, присущий открываемому сеансу и отправляет его в поле token ответа. В случае неуспеха в ответе поле token будет пустым. 
Ответ от сервера так же содержит структуру json c полями. Обязательными полями являются code и descr – код ответа (ОК или ошибки) и строка-описание. За ними идут собственные поля ответа.
Например, ответ на запрос 1 может выглядеть так: { “code” : 0 , “descr” : “OK” , “token” : “123456” }    
2.1) клиент при положительном ответе сохраняет токен и переходит к пукту 3.
2.2) при отрицательном ответе или отсутствии ответа (таймаут операции) клиент должен оповестить оператора об ошибке. (поле descr из ответа или «Сервер недоступен») и вернуться к пункту 1).
Если сервер регистрирует более 5 неправильных попыток входа с данного IP, он увеличивает время ответа до 5 минут для предотвращения перегрузки и подбора пароля.
Токен сеанса действителен установленное время (предварительно на 10 минут) после каждого запроса, но не более 24 часов с момента выдачи. 
Если токен получен клиентом, оператор дополнительно может закрыть сессию кнопкой «выйти».
По нажатию кнопки приложение отправляет запрос URI “/reset/closeSession”. В запросе передается поле token, содержащее токен закрываемого сеанса. После этого клиент переходит к ожиданию логина/пароля, а сервер аннулирует токен и дальнейшие запросы с ним отвергает.
3) Клиент производит сбор данных. Оператор сканирует по приглашению программы (аппаратным сканером) QR-код, прилагаемый к устройству, либо штрих-код. Также оператор может выбрать «ручной ввод» и ввести один из кодов, MAC-адрес или ИД устройства.
По нажатию кнопки «стереть устройство» приложение отправляет запрос URI “/reset/deleteID” (запрос 2) с полями token, field, value, заполнив их собранными данными. Поле field содержит название поля в таблице устройств, в котором будет искаться значение поля value.
4) Сервер проверяет токен, наличие поля field, а также наличие и уникальность значения value в этом поле. В случае, если всё верно, запись устройства помечается как неактивная. Также помечаются как свободные штрих- и qr-коды. Результат возвращается в ответе в полях code и descr. Дополнительно проверяется заполненность поля mac в таблице. Если оно пусто, значит сбой произошел до попытки непосредственной прошивки устройства, и стирать его память не нужно. В этом случае поле needErase ответа будет иметь значение “no”. Если же поле mac в таблице заполнено, значит устройство (с большой долей вероятности) подверглось прошивке и его память нужно стереть. Тогда поле needErase ответа будет иметь значение “yes”.
4.1) при положительном needErase клиент переходит к пункту 5).
4.2) при отрицательном ответе сервера клиент инструктирует оператора и переходит к пункту 3).
4.3) при отсутствии ответа от сервера клиент инструктирует оператора и переходит к пункту 1).
5) Клиент выполняет скрипт стирания памяти устройства. Если устройство не подключено, выводится предупреждение, но возможность продолжить без стирания есть. После клиент переходит к пункту 3).
